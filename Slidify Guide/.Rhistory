names(adData)
names(adData)
?preProcess
TrainingSmall <- training[,58:69]
View(TrainingSmall)
M <- abs(cor(TrainingSmall))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
View(M)
library(caret)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
TrainingSmall <- training[,c(1,58:69)]
M <- abs(cor(TrainingSmall))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
row col
TrainingSmall.w.Outcome <- training[,c(1,58:69)]
TrainingSmall <- training[,58:69]
M <- abs(cor(TrainingSmall))
diag(M) <- 0
which(M > 0.9,arr.ind=T)
row col
preProc <- preProcess(log10(TrainingSmall+1),method="pca",pcaComp=2)
AlzPC <- predict(preProc,log10(TrainingSmall+1))
plot(AlzPC[,1],AlzPC[,2],col=typeColor)
?preProcess
complete.cases(TrainingSmall)
TrainingSmall
TrainingSmall+1
log10(TrainingSmall+1)
library(Slidify)
install.packages("devtools")
library(devtools)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
cor.test(x, y)
lm.data <- lm(y~x)
lm.data
summary(lm.data)
library(mtcars)
names(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
lm.data <- lm(y~x)
summary(lm.data)
confint(lm.data)
?mtcars
3*-5.3445
-16.0335+37.2851
predict(lm.data, new, se.fit = TRUE, interval = "confidence", level = 0.95)
?predict
predict.lm(lm.data, 3)
predict(lm.data, 3)
predict(lm.data, 3, se.fit = TRUE, interval = "confidence", level = 0.95)
-5.3445*2
x.short <- x/2
y.short <- y/2
lm.data.short <- lm(y.short~x.short)
summary(lm.data.short)
confint(lm.data.short)
-6.486*2
summary(lm.data)
x.add <- x+2
x.add <- x+2
lm.data.xadd <- lm(y~x.add)
summary(lm.data.xadd)
confint(lm.data, level=0.95)
mean(x)
3.21725*-6.486308
-20.86807+33.450500
3.21725*-5.3445
-17.19459+47.9741
Q.Predictors <- data.frame(x=c(3.21725, 3.0))
View(Q.Predictors)
View(Q.Predictors)
predict(lm.data, Q.Predictors, se.fit = TRUE, interval = "confidence", level = 0.95)
3*-4.202635
41.119753+-12.6079
library(slidify)
library(swirl)
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
data(mtcars)
summary(mtcars)
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
?mtcars
View(mtcars)
View(mtcars)
View(mtcars)
View(mtcars)
export(mtcars)
library(xlsReadWrite)
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
install.packages("xlsReadWrite")
install.packages("xlsx")
install.packages("dataframes2xls")
?dataframes2xls
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
library(dataframes2xls)
?dataframes2xls
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
install.packages("openxlsx")
library(openxlsx)
?openxlsx
install.packages(c("Rcpp", "devtools"), dependencies=TRUE)
require(devtools)
install_github("openxlsx", "awalker89")
install.packages(c("Rcpp", "devtools"), dependencies = TRUE)
library(openxlsx)
?openxlsx
??openxlsx
writeData(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
install.packages("dataframes2xls")
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
library(dataframes2xls)
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
install.packages("WriteXLS")
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
library(WriteXLS)
write.xls(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
writeXLS(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
WriteXLS(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.xls")
WriteXLS(mtcars, "mtcars.xls")
?WriteXLS
split(mtcars, mtcars$am)
mtcars.by.transmission<-split(mtcars, mtcars$am)
summary(mtcars.by.transmission)
summary(mtcars.by.transmission$1)
summary(mtcars.by.transmission$am)
?write.csv
data(mtcars)
mtcars.by.transmission<-split(mtcars, mtcars$am)
?write.csv
write.csv(mtcars, "c:/Users/Demetria/Documents/Coursera/Regression Models/Project/mtcars.csv")
mtcars$automatic = mtcars$am == 0
mtcars.by.transmission<-split(mtcars, mtcars$automatic)
par(mfrow = c(1,2))
hist( mtcars$mpg[which(mtcars$automatic == TRUE)], col = "steelblue", xlab = "MPG",
main = "Automatic")
hist( mtcars$mpg[which(mtcars$automatic == FALSE)], col = "steelblue",xlab = "MPG",
main = "Manual")
model.lm = lm(mpg ~ automatic, data = mtcars)
summary(model.lm)
model.fs = lm(automatic ~ wt, data = mtcars) # first stage.
model.IV = lm( mpg ~ model.fs$fitted.values, data = mtcars) # second stage.
model.IV # for detailed report use 'summary(model.IV)'
par(mfrow = c(1,2))
hist( model.lm$residuals, xlab = "Residuals", main = "SV Regression", col = "orange" )
hist( model.IV$residuals, xlab = "Residuals", main = "MV Regression",col = "orange") # MV = Multiple Variable
model1<-lm(mpg~.,data=mtcars)
mtcars$am.f<-factor(mtcars$am)
model2<-lm(mpg~wt+I(am.f),data=mtcars)
model3<-lm(mpg~I(am.f),data=mtcars)
plot(mtcars$mpg,resid(model3))
Comp23<-anova(model2,model3)
data(mtcars)
categorical.vars <- mtcars[,c(2, 8, 11)]
categorical.vars <- apply(categorical.vars, 2, as.factor)
continuous.vars <- mtcars[,c(1, 3:7, 10)]
tidy <- data.frame(categorical.vars, continuous.vars)
tidy$transmission <- factor(mtcars$am, labels = c("automatic", "manual"))
plot(mpg ~ transmission, data = tidy)
m.1 <- lm(mpg ~ transmission, data = tidy)
par(mfrow = c(2,2))
plot(m.1)
t.test(mpg ~ transmission, data = tidy )
summary(m.1)
for(i in 1:ncol(continuous.vars)){
x <- t.test(continuous.vars[,i] ~ tidy$transmission)
print(x)
}
for(i in 1:ncol(categorical.vars)){
tbl <- table(categorical.vars[,i], tidy$transmission)
x <- fisher.test(tbl)
print(x)
}
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
+        panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
+        panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
+        panel = panel.smooth, rows = 1)
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
boxplot(mpg ~ am, data = mtcars, col = "red")
?boxplot
boxplot(mpg ~ am, data = mtcars, names= c(Manual, Automatic), col = "red")
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red")
?boxplot
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red", main = "Median MPG by Car Transmission Type")
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red", main = "Median MPG by Car Transmission Type")
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red", main = "Median MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ hp | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ drat | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ wt | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ gear | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
coplot(mpg ~ carb | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ cyl | as.factor(am), data = mtcars,
panel = panel.smooth, rows = 2)
qplot(cyl, mpg, data = mtcars, color = am)
library(ggplot2)
qplot(cyl, mpg, data = mtcars, color = am)
data(mtcars)
categorical.vars <- mtcars[,c(2, 8, 11)]
categorical.vars <- apply(categorical.vars, 2, as.factor)
continuous.vars <- mtcars[,c(1, 3:7, 10)]
tidy <- data.frame(categorical.vars, continuous.vars)
tidy$transmission <- factor(mtcars$am, labels = c("automatic", "manual"))
m.1 <- lm(mpg ~ transmission, data = tidy)
View(tidy)
qplot(cyl, mpg, data = tidy, color = transmission)
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("point", "smooth"), method = "lm")
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("point"), method = "lm")
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("smooth"), method = "lm")
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("point", "smooth"), method = "lm")
qplot(cyl, mpg, data = tidy, facets = . ~ transmission, color = transmission, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, facets = . ~ cyl, color = cyl, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, color = cyl, geom = c("point", "smooth"), method = "lm")
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, color = cyl, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, color = cyl, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, color = cyl, geom = c("point", "smooth"), method = "lm")
qplot(cyl, mpg, data = tidy, color = transmission, geom = c("point", "smooth"), method = "lm")
qplot(transmission, mpg, data = tidy, color = cyl, geom = c("point", "smooth"), method = "lm")
boxplot(mpg ~ am, data = mtcars, names= c("Manual", "Automatic"), col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
boxplot(mpg ~ am, data = mtcars, col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
View(mtcars)
boxplot(mpg ~ am, data = mtcars, names= c("Automatic", "Manual"), col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
library(plotly)
library(ggplot2)
install.packages("plotly")
library("devtools")
library(devtools)
install_github("ropensci/plotly")
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid$mpg <- stats::predict(model, newdata=grid)
viz2 <- qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
py$ggplotly(viz2)
model <- lm(mpg ~ wt + factor(cyl), data=mtcars)
grid <- with(mtcars, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
View(grid)
grid$mpg <- stats::predict(model, newdata=grid)
viz2 <- qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
ggplot(viz2)
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) + geom_line(data=grid)
qplot(wt, mpg, data=mtcars, colour=factor(am)) + geom_line(data=grid)
View(tidy)
qplot(wt, mpg, data=tidy, colour=factor(transmission)) + geom_line(data=grid)
data(mtcars)
?mtcars
boxplot(mpg ~ am, data = mtcars, names= c("Automatic", "Manual"), col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
?data.frame
car.data <- mtcars
car.data$transmission <- car.data$am
car.data$transmission <- factor(mtcars$am, labels = c("automatic", "manual"))
mtcars
View(car.data)
View(mtcars)
car.data <- mtcars
car.data$transmission <- factor(mtcars$am, labels = c("automatic", "manual"))
plot(mpg ~ transmission, data = car.data)
boxplot(mpg ~ transmission, data = car.data, col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
x <- mtcars[order(mtcars$mpg),] # sort by mpg
x$am <- factor(x$am) # it must be a factor
x$color[x$am==0] <- "red"
x$color[x$am==1] <- "blue"
dotchart(x$mpg,labels=row.names(x),cex=.7,groups= x$am,
main="Gas Milage for Car Models\ngrouped by Transmission Typecylinder",
xlab="Miles Per Gallon", gcolor="black", color=x$color)
car.data <- mtcars[order(mtcars$mpg),]
car.data$transmission <- factor(car.data$am, labels = c("automatic", "manual"))
View(car.data)
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Gas Milage for Car Models\ngrouped by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="red")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Gas Mileage \nGrouped by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="red")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="red")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color=transmission)
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="red")
boxplot(mpg ~ transmission, data = car.data, col = "red", main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
simple.lm <- lm(mpg ~ transmission, data = car.data)
View(x)
car.data$transmission <- factor(car.data$am, labels = c("automatic", "manual"))
car.data$color[car.data$transmission==0] <- "red"
car.data$color[car.data$transmission==1] <- "blue"
boxplot(mpg ~ transmission, data = car.data, col = color, main = "MPG by Car Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(mpg ~ transmission, data = car.data, col = car.data$color, main = "MPG by Car Transmission Type",
xlab="Transmission Type", ylab="Miles Per Gallon")
boxplot(mpg ~ transmission, data = car.data, col = c("red", "blue"), main = "MPG by Car Transmission Type", xlab="Transmission Type (Binary)", ylab="Miles Per Gallon")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color=car.data$color)
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="car.data$color"red"")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="car.data$color"red")
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color="red")
car.data$color[car.data$am==0] <- "red"
car.data$color[car.data$am==1] <- "blue"
dotchart(car.data$mpg,labels=row.names(car.data),cex=.7,groups= car.data$transmission,
main="Individual Gas Mileage by Transmission Type",
xlab="Miles Per Gallon", gcolor="black", color=car.data$color)
simple.lm <- lm(mpg ~ transmission, data = car.data)
simple.lm
simple.transmission.lm <- lm(mpg ~ transmission, data = car.data)
simple.transmission.lm
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid)
library(ggplot2)
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
wt = seq(min(wt), max(wt), length = 20),
cyl = levels(factor(cyl))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid)
library(ggplot2)
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
wt = seq(min(cyl), max(cyl), length = 20),
cyl = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid)
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
wt = seq(min(cyl), max(cyl), length = 20),
transmission = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid)
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
cyl = seq(min(cyl), max(cyl), length = 20),
transmission = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid)
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
cyl = seq(min(cyl), max(cyl), length = 20),
transmission = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=factor(transmission)) + geom_line(data=grid) + labs(title = "Gas Mileage by Cylinders in Car /n Grouped by Transmission Type") + labs(x = "Count of Cylinders", y = "Gas Mileage (MPG)")
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
cyl = seq(min(cyl), max(cyl), length = 20),
transmission = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=transmission) + geom_line(data=grid) + labs(title = "Gas Mileage by Cylinders in Car /n Grouped by Transmission Type") + labs(x = "Count of Cylinders", y = "Gas Mileage (MPG)")
simple.cyl.model <- lm(mpg ~ cyl + factor(transmission), data=car.data)
grid <- with(car.data, expand.grid(
cyl = seq(min(cyl), max(cyl), length = 20),
transmission = levels(factor(transmission))
))
grid$mpg <- stats::predict(simple.cyl.model, newdata=grid)
qplot(cyl, mpg, data=car.data, colour=transmission) + geom_line(data=grid) + labs(title = "Gas Mileage by Cylinders in Car /n Grouped by Transmission Type") + labs(x = "Count of Cylinders", y = "Gas Mileage (MPG)")
scatterplot.matrix(~mpg+cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb, data=mtcars,
main="Plot 2: Scatterplot Matrix")
par(mfrow = c(1,2))
hist( model.lm$residuals, xlab = "Residuals", main = "SV Regression", col = "orange" )
hist( model.IV$residuals, xlab = "Residuals", main = "MV Regression",col = "orange") # MV = Multiple Variable
model.fs = lm(automatic ~ wt, data = mtcars) # first stage.
model.IV = lm( mpg ~ model.fs$fitted.values, data = mtcars) # second stage.
model.IV # for detailed report use 'summary(model.IV)'
simple.transmission.lm <- lm(mpg ~ transmission, data = car.data)
simple.transmission.lm.residuals <- lm( mpg ~ simple.transmission.lm$fitted.values, data = car.data)
simple.transmission.lm.residuals
t.test(mpg ~ transmission, data = car.data)
summary(simple.transmission.lm)
simple.transmission.lm$residuals
mean(simple.transmission.lm$residuals)
simple.transmission.lm <- lm(mpg ~ transmission, data = car.data)
simple.transmission.lm.residuals <- lm( mpg ~ simple.transmission.lm$fitted.values, data = car.data)
simple.transmission.lm.residuals
?plot
plot(simple.transmission.lm.residuals)
setwd("~/R/FirstShiny")
library(shiny)
runApp()
runApp()
runApp()
runApp()
?plot
IrisDataset <- iris[iris$Species == "setosa",c("Sepal.Length", "Sepal.Width")]
View(IrisDataset)
plot(IrisDataset, main = c("Iris Regression for Species ", "setosa"))
plot(IrisDataset, main = c("Attribute Regression and Boxplots"))
plot(IrisDataset[,1], IrisDataset[,2])
runApp()
?data.frame
runApp()
runApp()
runApp()
runApp()
IrisDataset.Plot <- data.frame(IrisDataset[,1], IrisDataset[,2])
View(IrisDataset.Plot)
View(IrisDataset.Plot)
IrisDataset.Plot <- data.frame(IrisDataset[,1], IrisDataset[,2], row.names = TRUE)
IrisDataset.Plot <- data.frame(IrisDataset[,"Sepal.Length"], IrisDataset[,"Sepal.Width])
)
IrisDataset.Plot <- data.frame(IrisDataset[,"Sepal.Length"], IrisDataset[,"Sepal.Width"])
View(IrisDataset.Plot)
IrisDataset.Plot <- data.frame(Sepal.Length=IrisDataset[,"Sepal.Length"], Sepal.Width=IrisDataset[,"Sepal.Width"])
View(IrisDataset.Plot)
runApp()
runApp()
runApp()
IrisDataset.Plot <- as.factor(IrisDataset())
IrisDataset.Plot <- as.factor(IrisDataset)
runApp()
names(IrisDataset)
name(IrisDataset[,1])="Test"
names(IrisDataset[,1])="Test"
View(IrisDataset)
names(IrisDataset[,1])<-"Test"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::setAccountInfo(name='darobertson', token='09526F35D223A50A989DA6FC9473843F', secret='F79WlqNn8R+uVE26jC5I9pkRoTRv8YMMgZpNMvMk')
library(shinyapps)
deployApp()
library(slidify)
slidify(index.Rmd"")
slidify("index.Rmd")
library(knitr)
slidify("index.Rmd")
slidify("index.Rmd")
